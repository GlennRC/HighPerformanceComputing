#include math.h
compile with -lm

gcc -std=c99 -lm -0 

to use template in c 
 module load mpi/openmpi-1.8.8

 mpicxx -lm myexec main.c

** chunk+padding algo***

 void splice(long rank, int p_num, float** chunk, int chk_w, int chk_h, float* image, int img_w, int img_h) {

    int offset = img_w*img_h/p_num;
    (*chunk) = (float*)malloc(sizeof(int)*chk_w*chk_h);

    for(int row=0; row<chk_h; row++) {
        for(int col=0; col<chk_w; col++) {

            // transpose chunk index
            int c_index = row*chk_w+col;
            // transpose image index
            int m_index = (row-1)*img_w+(col-1);

            if((row == 0 && col == 0) ||
                (row == 0 && col ==  chk_w-1) ||
                (row == chk_h-1 && col == 0) ||
                (row == chk_h-1 && col == chk_w-1)) {
                //This is a corner of pixel; fill it with gray
                (*chunk)[c_index] = 127;
                continue;
            }
            if (row == 0) {
                if (rank == 0) {
                    // duplicate bottom row
                    (*chunk)[c_index] = image[row*img_w+(col-1)+(offset*rank)];
                }
                else {
                    // grab the last row of the previous chunk
                    (*chunk)[c_index] = image[(img_h/p_num-1)*img_w+(col-1)+(offset*(rank-1))];
                }
            }
            else if(row == chk_h-1) {
                if (rank == p_num-1) {
                    // duplicate top row
                    (*chunk)[c_index] = image[(row-2)*img_w+(col-1)+(offset*rank)];
                }
                else {
                    // grab the top row of the next chunk
                    (*chunk)[c_index] = image[(col-1)+(offset*(rank+1))];
                }
            }
            //Mirror edges
            else if (col == 0) {
                (*chunk)[row*chk_w+col] = image[(row-1)*img_w+(offset*rank)];
            }
            else if(col == chk_w-1) {
                (*chunk)[row*chk_w+col] = image[(row-1)*img_w+(img_w-1)+(offset*rank)];
            }
            else {
                (*chunk)[row*chk_w+col] = image[m_index+(offset*rank)];
            }
        }
    }
}

